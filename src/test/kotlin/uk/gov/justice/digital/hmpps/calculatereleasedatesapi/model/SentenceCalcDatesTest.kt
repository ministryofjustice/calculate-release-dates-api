package uk.gov.justice.digital.hmpps.calculatereleasedatesapi.model

import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import uk.gov.justice.digital.hmpps.calculatereleasedatesapi.model.external.prisonapi.SentenceCalcDates
import java.time.LocalDate

internal class SentenceCalcDatesTest {

  @Test
  fun `manually entered dates should not cause a mismatch`() {
    val sentenceCalcDates = SentenceCalcDates(
      LocalDate.of(2023, 11, 22),
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      LocalDate.of(2022, 5, 5),
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
    )

    val differentManualDate = SentenceCalcDates(
      LocalDate.of(2023, 11, 22),
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      LocalDate.of(2024, 5, 5),
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
    )

    val result = sentenceCalcDates.isSameComparableCalculatedDates(differentManualDate)
    Assertions.assertTrue(result)
  }

  @Test
  fun `a different ESED should not cause a mismatch`() {
    val sentenceCalcDates = SentenceCalcDates(
      LocalDate.of(2023, 11, 22),
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      LocalDate.of(2022, 5, 5),
    )

    val differentEffectiveSentencedEndDate = SentenceCalcDates(
      LocalDate.of(2023, 11, 22),
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      LocalDate.of(2024, 5, 5),
    )

    val result = sentenceCalcDates.isSameComparableCalculatedDates(differentEffectiveSentencedEndDate)
    Assertions.assertTrue(result)
  }

  @Test
  fun `different comparable calculated dates are not the same`() {
    val sentenceCalcDates = SentenceCalcDates(
      LocalDate.of(2023, 11, 22),
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
    )
    val differentSentenceExpiryCalculatedDate = SentenceCalcDates(
      LocalDate.of(2025, 11, 22),
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
    )

    val result = sentenceCalcDates.isSameComparableCalculatedDates(differentSentenceExpiryCalculatedDate)
    Assertions.assertFalse(result)
  }

  @Test
  fun `same comparable calculated dates are the same`() {
    val sentenceCalcDates = SentenceCalcDates(
      LocalDate.of(2023, 11, 22),
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
    )
    val sameSentenceExpiryCalculatedDate = SentenceCalcDates(
      LocalDate.of(2023, 11, 22),
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
    )

    val result = sentenceCalcDates.isSameComparableCalculatedDates(sameSentenceExpiryCalculatedDate)
    Assertions.assertTrue(result)
  }
}
